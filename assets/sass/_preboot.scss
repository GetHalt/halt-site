$baseline-px: 			16px !default;

@mixin rem($property, $px-values, $important: false) {
	// Convert the baseline into rems
	$baseline-rem: $baseline-px / 1rem;

	@if $important == true {
		$important: " !important"; }
	@else {
		$important: '';
	}

	// Print the first line in pixel values
	#{$property}: unquote($px-values + $important);
	// If there is only one (numeric) value, return the property/value line for it.
	@if type-of($px-values) == "number" {
		#{$property}: unquote($px-values / $baseline-rem + $important); }
	@else {
		// Create an empty list that we can dump values into
		$rem-values: unquote("");
		@each $value in $px-values {
			// If the value is zero, return 0
			@if $value == 0 {
				$rem-values: append($rem-values, $value); }
			@else {
				$rem-values: append($rem-values, $value / $baseline-rem); } }
		// Return the property and its list of converted values
		#{$property}: unquote($rem-values + $important); } }


$default-feature: min-width; // Default @media feature for the breakpoint() mixin

// Usage:
// @include media(500px){ …css stuff… }, will output - (min-width: 500px)
// @include media(max-width 500px){ …css stuff… }, will output - (max-width: 500px)
// @include media(max-width 500px min-width 800px){ …css stuff… }, will output - (max-width: 500px) and (min-width: 800px)
@mixin media( $query: $feature $value ) {
	@if length($query) == 1 {
		@media screen and ($default-feature: nth($query, 1)) {
			@content;
		}
	}

	@else if length($query) == 2 {
		@media screen and (nth($query, 1): nth($query, 2)) {
			@content;
		}
	}

	@else if length($query) == 4 {
		@media screen and (nth($query, 1): nth($query, 2)) and (nth($query, 3): nth($query, 4)) {
			@content;
		}
	}

	@else {
		@warn "Wrong number of arguments for breakpoint(). Read the documentation for more details.";
	}
}
